#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('apiinventario:server');
var http = require('http');
var MercadoLibreController = require('./../controllers/mercado-libre.controller');
var cron = require('node-cron');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3002');

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var db = require('./../bdd.coneccion');


/**
 * Listen on provided port, on all network interfaces.
 */

db.connect()
    .then(function(obj) {
        obj.done(); // success, release connection;
        server.listen(port, () => {
            console.log('Coneccion la bdd exitosa, El servidor escucha en el puerto:' + port);
            // MercadoLibreController.getToken();
            // llama a la tarea de actualizacion del token de mercado libre
            cron.schedule('0 0-23/4 * * *', () => {
                console.log("actulizacion de token cada 4 hora");
                MercadoLibreController.actualizarTokenMec(); 
            });
            //actualiza las publicaciones vencidas
            cron.schedule('0 1 * * *', () => {
                console.log("tarea Ejecutada a la 1 ");
                MercadoLibreController.actualizarPublicacionesVencidas();
            });

        });
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(function(error) {
        console.log("ERROR en la coneccion a la base de datos:", error);
    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}